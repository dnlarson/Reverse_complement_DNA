#!/usr/bin/env python3
"""tests for DNA-example.py"""

import os.path
from subprocess import getstatusoutput, getoutput
import re

prg = './DNA-example.py'
out = 'out.txt'

# dna = 'GTCTGCCCCTAGACCAGTAAATTCACATCTCCTTAAGTGATACGAGCGGAAACCCTCGGGAACTTCGGAAATGTAGCTCATCAGAGGAGGGTAGATAGATTGGAGCCTGATGATAGCCGGCCGTGCGACCCGGTTGAACTCTTCTGGTTCCTACCAGGGGCCGCTCGTTAGTTGATGTGCCTCTCTCCGATTGCTCTTTATGAGCCGGAGGAAGGCAGCTCATCCACCAGCGTAGGAATATTCCTTAAACACTGTAGCCGTCCCACTCATCCTAGATCGGCATGACTGCTACTGTTTGATATGCCGTGGACCAAGTCGGGCCGGGTGTACTTTTTAATAGAACGCACGTTTCATCGCTGCGTCGTGAGTAAGGGTATCTCAGGCTACCCGGACATTTCTGCCGGGAAGCAATCTACATCCAGACTTTTAATGAACAGAGTGTAATTAAGGTATTAATCCCCTTCAGCAGTACGTCAGTAAGAGCGACTTTCAAACTCAAACCACTTCTGAAAATGCGTCCCATGCCCAGCATTAGTTTGAGCTAAACTGTGTTAAAGAACGCCTCGGTCGAAAAACCACGCATTGCATCACATGGGCGGCGTACACTTTTGGAACCGTTGGCTAAGAATTATACTTGGATTAAAGATGTGATGTCAGTGCGTCGAGCGACGTTTGGACATTTGGCCCGACCAGGTTAAGAATTACGACGACCAATGTTTAAGTTCTAAACGGATGGATGATGTAATCAGCTGACGTTTTCAGCCCACCGTTTGCAAGCGGTACGTTCTGCACAATCCGGGCGTGCGTCCCTGAAGTGAAGTATTACCTACCACTCATTCATGACCTACCTGAACTGCATTTGTTCCTAAAGTTCCGGCAATCACGGGCGAAATTTTTCGGCCCATCTAAACTTGG'

# --------------------------------------------------
def test_usage():
    """usage"""

    for flag in ['-h', '--help']:
        rv, out = getstatusoutput('{} {}'.format(prg, flag))
        assert rv == 0
        assert re.match("usage", out)

# --------------------------------------------------
def test_bad_args():
    """die on bad input"""

    rv1, out1 = getstatusoutput(prg)
    assert rv1 > 0
    assert re.match("usage", out1, re.IGNORECASE)

    for flag in ['-d', '--DNA']:
        rv2, out2 = getstatusoutput('{} {} foo'.format(prg, flag))
        assert rv2 > 0
        assert out2 == '"foo" is not a DNA strand'

# --------------------------------------------------
def test_good_input():
    """expected results"""

    expected3 = 'Output file written to "out.txt"'

    rv3, out3 = getstatusoutput('{} -d DNA.txt'.format(prg))
    assert rv3 == 0
    assert out3 == expected3

    expected4 = 'AAGTTTAGATGGGGAAAAATTTGGTGATTGGGAATTTAGGAAAAATGAGTTAGGTAGGTATGAATGAGTGGTAGGTAATATTATTAGGGAGAGGGATTGTGAGAAGTAGTTGAAAGGTGGGTGAAAAGTAGTGATTAATATATGTTTAGAATTAAAATTGGTGTGTAATTTTAATGGTGGGAAATGTAAAGTGTGAGATGAATAATTTTAATAAGTATAATTTTAGAAGGTTAAAAGTGTAGGATGTGATGAATGGTGGTTTTTGAGAGGGTTTTTAAAAGTTTAGTAAATAATGTGGGATGGGAGATTTTAGAAGTGGTTTGAGTTTGAAAGTGTTTATGAGTATGTGAAGGGGATTAATATTAATTAATTGTTATTAAAAGTTGGATGTAGATTGTTGGAGAAATGTGGGTAGTGAGATATTATAGAGAGGATGAAAGTGGTTTATTAAAAAGTAAGGGATTGGTAGGATATAAAAGTAGAGTATGGATTAGGATGAGTGGGAGGTAAGTGTTTAAGGAATATTTAGTGGTGGATGAGTGTTTGGTATAAAGAGAATGGAGAGAGGAATAATAAGAGGGTGGTAGGAAAGAAGAGTTAAGGGTGAGGGGTATATAGGTAATTATTATTTGATGAGTAATTTGAAGTTGAGGGTTTGTGTATATTAAGGAGATGTGAATTTATGGTTAGGGGAGA'

    rv4, out4 = getstatusoutput('cat {}'.format(out))
    assert rv4 == 0
    assert out4 == expected4
    